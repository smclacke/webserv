perhaps try putting a HTTPResponseLine and then adding the cgiOutput


-----

curl -X POST http://localhost:2345 \
  -F "file1=@testfiles/text1.txt" \
  -F "file2=@testfiles/text2.txt"


curl -X DELETE http://localhost:2345/uploads/text2.txt



_--------------------------------------

 CGI notes

 while environment variables are used for passing metadata and configuration, STDIN is used for passing the actual data payload, especially in POST requests.

curl -X POST http://localhost:8080/cgi-bin/test.py -d "name=John&age=30"

http://localhost:8080/cgi-bin/test.py: The URL of the CGI script you want to test.
-d "name=John&age=30": The data you want to send in the POST request. This data will be available to your CGI script via STDIN.

***** 
#!/usr/bin/env python3

import sys
import os

def main():
    # Read the content length from the environment
    content_length = int(os.environ.get('CONTENT_LENGTH', 0))
    
    # Read the POST data from stdin
    post_data = sys.stdin.read(content_length)
    
    # Print the HTTP response headers
    print("Content-Type: text/plain\n")
    
    # Print the POST data
    print("Received POST data:")
    print(post_data)

if __name__ == "__main__":
    main()

*****

In a CGI (Common Gateway Interface) setup, the script is responsible for generating the HTTP response headers. This is because the CGI script is essentially acting as the server for the duration of the request, and it needs to provide both the headers and the body of the HTTP response.


